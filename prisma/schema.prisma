generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                  @id @default(autoincrement())
  login              String               @unique
  password           String               @db.VarChar(64)
  salt               String               @db.VarChar(64)
  refreshToken       String?              @db.VarChar(256)
  isAdmin            Boolean              @default(false)
  BooklistbookOnUser BooklistbookOnUser[]
  Ratings            Ratings[]
  ReadBooksOnUser    ReadBooksOnUser[]
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String
  books Book[]
}

model Book {
  id                 Int                  @id @default(autoincrement())
  name               String
  cover              String               @db.VarChar(200)
  author             String               @db.VarChar(200)
  language           String               @db.VarChar(50)
  year               Int
  originalName       String
  pages              Int
  abstract           String
  avgRating          Float                @default(0)
  totalRatings       Int                  @default(0)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  categoryId         Int                  @default(0)
  category           Category             @relation(fields: [categoryId], references: [id], onDelete: SetDefault)
  BooklistbookOnUser BooklistbookOnUser[]
  Ratings            Ratings[]
  ReadBooksOnUser    ReadBooksOnUser[]
}

model Ratings {
  userId    Int
  bookId    Int
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, bookId])
}

model ReadBooksOnUser {
  bookId     Int
  userId     Int
  assignedAt DateTime @default(now())
  book       Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, bookId])
}

model BooklistbookOnUser {
  bookId     Int
  userId     Int
  assignedAt DateTime @default(now())
  book       Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, bookId])
}
